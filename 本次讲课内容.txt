https://github.com/csjsp/jee2018_13
private final static Logger logger
  =LoggerFactory.getLogger(I18NDemo.class);
  
  logger.debug(String);
  logger.debug("loc is {}",String);
  
  记录器的层次结构，
  Root,自己定义的demo,
  additivity是否使用上层的记录器，true
  
  实现信息过滤，特别关注error的信息
  <File name="error" fileName="${prj.name}-error.log">
	  <ThresholdFilter level="error" 
	onMatch="ACCEPT" onMismatch="DENY"/>
	<PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
  </File>
  滚动日志文件
  <RollingFile name="rollingFile" fileName="${prj.name}.txt"
		filePattern="${prj.name}-%d{yyyyMMdd}-%i.log">		   
		   <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
		   <!--  什么时候产生新文件？ -->
		    <Policies>
                 <TimeBasedTriggeringPolicy/>
                 <SizeBasedTriggeringPolicy size="2KB"/>
             </Policies>
              <DefaultRolloverStrategy max="20"/>
		</RollingFile>
  日志文件满足产生新文件条件后，自动产生一个